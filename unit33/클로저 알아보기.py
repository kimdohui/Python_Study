# 스크립트 전체에서 접근할 수 있는 변수를 전역 변수라 한다.(이러한 범위를 전역 범위라 함)

# 변수를 만든 함수만 접근할 수 있는 변수를 지역 변수라 한다.(이러한 범위를 지역 범위하 한다.)




x = 10          # 전역 변수
def foo():
    x = 20      # x는 foo의 지역 변수
    print(x)    # foo의 지역 변수 출력
 
foo()
print(x)        # 전역 변수 출력


# 위와 같이 함수 안에서 전역 변수를 변경하면 함수내에서는 변경된 값으로 출력된다.
# (함수 foo 내부의 x는 전역 변수가 아닌 foo의 지역변수이다. )


print('\n-------------\n')

x = 10          # 전역 변수
def foo():
    global x    # 전역 변수 x를 사용하겠다고 설정
    x = 20      # x는 전역 변수
    print(x)    # 전역 변수 출력
 
foo()
print(x)        # 전역 변수 출력


# 만약 x를 전역 변수로 사용하고 싶다면 global을 앞에 붙여야 한다.



print('\n-------------\n')

# 함수 안에 함수 만들기

def print_hello() :
    hello = 'hello'
    def print_Hi() :
        print(hello)  # 바깥 함수의 지역 변수 사용
    print_Hi()

print_hello()


# 바깥 함수의 지역변수는 그 안에 속한 모든 함수에서 접근 가능


print('\n-------------\n')

def A():
    x = 10        # A의 지역 변수 x
    def B():
        x = 20    # x에 20 할당
 
    B()
    print(x)      # A의 지역 변수 x 출력
 
A()


# 겉보기엔 바깥 A의 지역변수 x가 20으로 값이 바뀔 것 같지만 그렇지 않고 따로 변수 x가 생성된다.
# 즉 A의 x는 값이 변경 되지 않는다.


print('\n-------------\n')

def A():
    x = 10        # A의 지역 변수 x
    def B():
        nonlocal x    # 현재 함수의 바깥쪽에 있는 지역 변수 사용
        x = 20        # A의 지역 변수 x에 20 할당
 
    B()
    print(x)      # A의 지역 변수 x 출력
 
A()

# 바깥 지역 변수를 사용하고 싶다면 nonlocal을 사용한다.
# nonlocal은 변수를 찾을 때 가장 가까운 함수부터 찾으므로 같은 변수들이 여러 개가 있다면 가장 가까운 변수를 사용하게 된다.


# 만약 global을 사용하면 함수가 몇 단계든 상관없이 무조건 전역 변수를 사용한다.
